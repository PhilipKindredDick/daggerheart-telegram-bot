# HTML –¥–ª—è Mini App
WEBAPP_HTML = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daggerheart Game</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
            line-height: 1.4;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
        }
        .card {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .btn {
            background: var(--tg-theme-button-color, #2481cc);
            color: var(--tg-theme-button-text-color, #ffffff);
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            margin-top: 10px;
            transition: opacity 0.2s;
        }
        .btn:hover {
            opacity: 0.8;
        }
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .btn-secondary {
            background: var(--tg-theme-hint-color, #708499);
        }
        .character-sheet {
            display: none;
        }
        .character-sheet.active {
            display: block;
        }
        .dice-result {
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: var(--tg-theme-hint-color, #708499);
            border-radius: 8px;
            animation: fadeIn 0.5s;
        }
        .input-group {
            margin-bottom: 15px;
        }
        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .input-group input, .input-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--tg-theme-hint-color, #708499);
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
        }
        .trait-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 15px 0;
        }
        .trait-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            background: var(--tg-theme-bg-color, #ffffff);
            border-radius: 8px;
            border: 1px solid var(--tg-theme-hint-color, #e0e0e0);
        }
        .trait-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .trait-btn {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: none;
            background: var(--tg-theme-button-color, #2481cc);
            color: white;
            cursor: pointer;
            font-size: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .trait-value {
            min-width: 30px;
            text-align: center;
            font-weight: bold;
            font-size: 18px;
        }
        .points-info {
            text-align: center;
            padding: 15px;
            background: var(--tg-theme-hint-color, #f0f0f0);
            border-radius: 8px;
            margin: 15px 0;
        }
        .character-preview {
            background: var(--tg-theme-bg-color, #ffffff);
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }
        .error {
            color: #e74c3c;
            font-size: 14px;
            margin-top: 5px;
        }
        .success {
            color: #27ae60;
            font-size: 14px;
            margin-top: 5px;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .loading {
            text-align: center;
            padding: 20px;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--tg-theme-hint-color, #e0e0e0);
        }
        .tab {
            flex: 1;
            padding: 12px;
            text-align: center;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }
        .tab.active {
            border-bottom-color: var(--tg-theme-button-color, #2481cc);
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h1>üó°Ô∏è Daggerheart</h1>
            <p>–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π</p>
            <div id="user-info"></div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∏ -->
        <div class="tabs">
            <div class="tab active" onclick="showTab('character')">üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂</div>
            <div class="tab" onclick="showTab('game')">üéÆ –ò–≥—Ä–∞</div>
            <div class="tab" onclick="showTab('dice')">üé≤ –ö–æ—Å—Ç–∏</div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ -->
        <div id="tab-character" class="tab-content">
            <div class="card" id="menu">
                <h2>–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h2>
                <button class="btn" onclick="showCharacterCreation()">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</button>
                <button class="btn btn-secondary" onclick="loadCharacter()">–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</button>
            </div>

            <div class="card character-sheet" id="character-creation">
                <h2>–®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>

                <div class="input-group">
                    <label for="char-name">–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</label>
                    <input type="text" id="char-name" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞">
                </div>

                <div class="input-group">
                    <label for="char-class">–ö–ª–∞—Å—Å:</label>
                    <select id="char-class" onchange="updateClassInfo()">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å</option>
                        <option value="guardian">–°—Ç—Ä–∞–∂ (Guardian)</option>
                        <option value="ranger">–°–ª–µ–¥–æ–ø—ã—Ç (Ranger)</option>
                        <option value="rogue">–ü–ª—É—Ç (Rogue)</option>
                        <option value="seraph">–°–µ—Ä–∞—Ñ–∏–º (Seraph)</option>
                        <option value="sorcerer">–ß–∞—Ä–æ–¥–µ–π (Sorcerer)</option>
                        <option value="warrior">–í–æ–∏–Ω (Warrior)</option>
                    </select>
                    <div id="class-description"></div>
                </div>

                <div class="input-group">
                    <label for="char-ancestry">–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:</label>
                    <select id="char-ancestry" onchange="updateAncestryInfo()">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ</option>
                        <option value="human">–ß–µ–ª–æ–≤–µ–∫ (Human)</option>
                        <option value="elf">–≠–ª—å—Ñ (Elf)</option>
                        <option value="dwarf">–î–≤–æ—Ä—Ñ (Dwarf)</option>
                        <option value="orc">–û—Ä–∫ (Orc)</option>
                    </select>
                    <div id="ancestry-description"></div>
                </div>

                <button class="btn" onclick="showTraitsStep()">–î–∞–ª–µ–µ: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</button>
                <button class="btn btn-secondary" onclick="showMenu()">–ù–∞–∑–∞–¥</button>
            </div>

            <div class="card character-sheet" id="traits-step">
                <h2>–®–∞–≥ 2: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>

                <div class="points-info">
                    <strong>–î–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤: <span id="available-points">4</span></strong><br>
                    <small>–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ 4 –æ—á–∫–∞, –∑–∞—Ç–µ–º —É–±–µ—Ä–∏—Ç–µ 1 –æ—á–∫–æ –∏–∑ –ª—é–±–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</small>
                </div>

                <div class="trait-grid">
                    <div class="trait-item">
                        <span>üí™ –°–∏–ª–∞</span>
                        <div class="trait-controls">
                            <button class="trait-btn" onclick="changeTrait('strength', -1)">-</button>
                            <span class="trait-value" id="strength-value">0</span>
                            <button class="trait-btn" onclick="changeTrait('strength', 1)">+</button>
                        </div>
                    </div>
                    <div class="trait-item">
                        <span>ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å</span>
                        <div class="trait-controls">
                            <button class="trait-btn" onclick="changeTrait('agility', -1)">-</button>
                            <span class="trait-value" id="agility-value">0</span>
                            <button class="trait-btn" onclick="changeTrait('agility', 1)">+</button>
                        </div>
                    </div>
                    <div class="trait-item">
                        <span>üéØ –¢–æ—á–Ω–æ—Å—Ç—å</span>
                        <div class="trait-controls">
                            <button class="trait-btn" onclick="changeTrait('finesse', -1)">-</button>
                            <span class="trait-value" id="finesse-value">0</span>
                            <button class="trait-btn" onclick="changeTrait('finesse', 1)">+</button>
                        </div>
                    </div>
                    <div class="trait-item">
                        <span>üëÅÔ∏è –ò–Ω—Ç—É–∏—Ü–∏—è</span>
                        <div class="trait-controls">
                            <button class="trait-btn" onclick="changeTrait('instinct', -1)">-</button>
                            <span class="trait-value" id="instinct-value">0</span>
                            <button class="trait-btn" onclick="changeTrait('instinct', 1)">+</button>
                        </div>
                    </div>
                    <div class="trait-item">
                        <span>üëë –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ</span>
                        <div class="trait-controls">
                            <button class="trait-btn" onclick="changeTrait('presence', -1)">-</button>
                            <span class="trait-value" id="presence-value">0</span>
                            <button class="trait-btn" onclick="changeTrait('presence', 1)">+</button>
                        </div>
                    </div>
                    <div class="trait-item">
                        <span>üìö –ó–Ω–∞–Ω–∏—è</span>
                        <div class="trait-controls">
                            <button class="trait-btn" onclick="changeTrait('knowledge', -1)">-</button>
                            <span class="trait-value" id="knowledge-value">0</span>
                            <button class="trait-btn" onclick="changeTrait('knowledge', 1)">+</button>
                        </div>
                    </div>
                </div>

                <div id="traits-error" class="error"></div>

                <button class="btn" onclick="showPreview()" id="next-btn" disabled>–î–∞–ª–µ–µ: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button class="btn btn-secondary" onclick="showCharacterCreation()">–ù–∞–∑–∞–¥</button>
            </div>

            <div class="card character-sheet" id="character-preview">
                <h2>–®–∞–≥ 3: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h2>

                <div class="character-preview" id="preview-content">
                    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ JavaScript -->
                </div>

                <button class="btn" onclick="createCharacter()">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</button>
                <button class="btn btn-secondary" onclick="showTraitsStep()">–ù–∞–∑–∞–¥</button>
            </div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ –∏–≥—Ä—ã -->
        <div id="tab-game" class="tab-content character-sheet">
            <div class="card">
                <h2>–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è</h2>
                <div id="game-status">
                    <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ –±—É–¥–µ—Ç –∑–¥–µ—Å—å...</p>
                </div>

                <div class="input-group">
                    <label for="action-input">–í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:</label>
                    <input type="text" id="action-input" placeholder="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?">
                </div>
                <button class="btn" onclick="sendAction()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ</button>

                <div id="game-log">
                    <!-- –õ–æ–≥ –∏–≥—Ä—ã -->
                </div>
            </div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ –∫–æ—Å—Ç–µ–π -->
        <div id="tab-dice" class="tab-content character-sheet">
            <div class="card">
                <h2>–ë—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π</h2>

                <div class="input-group">
                    <label for="trait-select">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:</label>
                    <select id="trait-select">
                        <option value="strength">üí™ –°–∏–ª–∞</option>
                        <option value="agility">ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å</option>
                        <option value="finesse">üéØ –¢–æ—á–Ω–æ—Å—Ç—å</option>
                        <option value="instinct">üëÅÔ∏è –ò–Ω—Ç—É–∏—Ü–∏—è</option>from flask import Flask, render_template_string, request, jsonify
import threading
import os
from config import PORT

app = Flask(__name__)

                        <option value="presence">üëë –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ</option>
                        <option value="knowledge">üìö –ó–Ω–∞–Ω–∏—è</option>
                    </select>
                </div>

                <div class="input-group">
                    <label for="difficulty-input">–°–ª–æ–∂–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12):</label>
                    <input type="number" id="difficulty-input" value="12" min="5" max="20">
                </div>

                <div class="input-group">
                    <label>
                        <input type="checkbox" id="advantage-check"> –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (+1d6)
                    </label>
                    <label>
                        <input type="checkbox" id="disadvantage-check"> –ü–æ–º–µ—Ö–∞ (-1d6)
                    </label>
                </div>

                <button class="btn" onclick="rollDice()">üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏</button>

                <div id="dice-result" class="dice-result" style="display: none;"></div>
            </div>
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        const tg = window.Telegram.WebApp;
        tg.expand();

        // –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        let characterData = {
            name: '',
            class: '',
            ancestry: '',
            traits: {
                strength: 0,
                agility: 0,
                finesse: 0,
                instinct: 0,
                presence: 0,
                knowledge: 0
            }
        };

        // –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        let availablePoints = 4;
        let pointsSpent = 0;

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–∞—Ö –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö
        const classInfo = {
            guardian: "–°—Ç—Ä–∞–∂ –∑–∞—â–∏—â–∞–µ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤, –±—Ä–æ—Å–∞—è—Å—å –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç—å. –í—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞ –∏ —Ö–∏—Ç—ã.",
            ranger: "–°–ª–µ–¥–æ–ø—ã—Ç –æ—Ç–ª–∏—á–Ω–æ —Å—Ç—Ä–µ–ª—è–µ—Ç –∏ –≤—ã–∂–∏–≤–∞–µ—Ç –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ. –ë—ã—Å—Ç—Ä –∏ —Ç–æ—á–µ–Ω.",
            rogue: "–ü–ª—É—Ç —Å—Ä–∞–∂–∞–µ—Ç—Å—è —Ö–∏—Ç—Ä–æ—Å—Ç—å—é –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é. –°–∫—Ä—ã—Ç–Ω—ã–µ –∞—Ç–∞–∫–∏ –∏ –ª–æ–≤–∫–æ—Å—Ç—å.",
            seraph: "–°–µ—Ä–∞—Ñ–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –º–∞–≥–∏—é –¥–ª—è –∏—Å—Ü–µ–ª–µ–Ω–∏—è –∏ –∑–∞—â–∏—Ç—ã.",
            sorcerer: "–ß–∞—Ä–æ–¥–µ–π –æ–±–ª–∞–¥–∞–µ—Ç –≤—Ä–æ–∂–¥–µ–Ω–Ω–æ–π –º–∞–≥–∏–µ–π –∏ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏.",
            warrior: "–í–æ–∏–Ω - –º–∞—Å—Ç–µ—Ä –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è, –Ω–∞–Ω–æ—Å—è—â–∏–π –º–æ—â–Ω—ã–µ —É–¥–∞—Ä—ã."
        };

        const ancestryInfo = {
            human: "–õ—é–¥–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã –∏ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã. –ë–æ–Ω—É—Å –∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—é.",
            elf: "–≠–ª—å—Ñ—ã –≥—Ä–∞—Ü–∏–æ–∑–Ω—ã –∏ –º–∞–≥–∏—á–µ—Å–∫–∏ –æ–¥–∞—Ä–µ–Ω—ã. –ë–æ–Ω—É—Å—ã –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∑–Ω–∞–Ω–∏—è–º.",
            dwarf: "–î–≤–æ—Ä—Ñ—ã –≤—ã–Ω–æ—Å–ª–∏–≤—ã –∏ –º–∞—Å—Ç–µ—Ä–æ–≤–∏—Ç—ã. –ë–æ–Ω—É—Å—ã –∫ —Å–∏–ª–µ –∏ –∏–Ω—Ç—É–∏—Ü–∏–∏.",
            orc: "–û—Ä–∫–∏ —Å–∏–ª—å–Ω—ã –∏ —Å–≤–∏—Ä–µ–ø—ã. –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∫ —Å–∏–ª–µ."
        };

        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userInfo = document.getElementById('user-info');
        if (tg.initDataUnsafe.user) {
            userInfo.innerHTML = `<p>üë§ ${tg.initDataUnsafe.user.first_name}</p>`;
        }

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏
        function showTab(tabName) {
            // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.style.display = 'none';
            });

            // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.getElementById(`tab-${tabName}`).style.display = 'block';

            // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
            event.target.classList.add('active');
        }

        function showMenu() {
            hideAllCharacterSheets();
            document.getElementById('menu').style.display = 'block';
        }

        function showCharacterCreation() {
            hideAllCharacterSheets();
            document.getElementById('character-creation').style.display = 'block';
        }

        function showTraitsStep() {
            const name = document.getElementById('char-name').value;
            const charClass = document.getElementById('char-class').value;
            const ancestry = document.getElementById('char-ancestry').value;

            if (!name.trim()) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!');
                return;
            }

            if (!charClass) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å!');
                return;
            }

            if (!ancestry) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ!');
                return;
            }

            characterData.name = name;
            characterData.class = charClass;
            characterData.ancestry = ancestry;

            hideAllCharacterSheets();
            document.getElementById('traits-step').style.display = 'block';

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            applyAncestryBonuses();
            updateTraitsDisplay();
        }

        function showPreview() {
            if (!validateTraits()) {
                return;
            }

            hideAllCharacterSheets();
            document.getElementById('character-preview').style.display = 'block';
            updatePreview();
        }

        function hideAllCharacterSheets() {
            document.querySelectorAll('.character-sheet').forEach(sheet => {
                sheet.style.display = 'none';
            });
        }

        function updateClassInfo() {
            const classSelect = document.getElementById('char-class');
            const description = document.getElementById('class-description');
            const selectedClass = classSelect.value;

            if (selectedClass && classInfo[selectedClass]) {
                description.innerHTML = `<small class="success">${classInfo[selectedClass]}</small>`;
            } else {
                description.innerHTML = '';
            }
        }

        function updateAncestryInfo() {
            const ancestrySelect = document.getElementById('char-ancestry');
            const description = document.getElementById('ancestry-description');
            const selectedAncestry = ancestrySelect.value;

            if (selectedAncestry && ancestryInfo[selectedAncestry]) {
                description.innerHTML = `<small class="success">${ancestryInfo[selectedAncestry]}</small>`;
            } else {
                description.innerHTML = '';
            }
        }

        function applyAncestryBonuses() {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
            resetTraits();

            const ancestry = characterData.ancestry;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            switch (ancestry) {
                case 'human':
                    characterData.traits.presence += 1;
                    break;
                case 'elf':
                    characterData.traits.finesse += 1;
                    characterData.traits.knowledge += 1;
                    break;
                case 'dwarf':
                    characterData.traits.strength += 1;
                    characterData.traits.instinct += 1;
                    break;
                case 'orc':
                    characterData.traits.strength += 2;
                    break;
            }
        }

        function resetTraits() {
            for (let trait in characterData.traits) {
                characterData.traits[trait] = 0;
            }
            availablePoints = 4;
            pointsSpent = 0;
        }

        function changeTrait(traitName, change) {
            const currentValue = characterData.traits[traitName];
            const newValue = currentValue + change;

            // –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            if (newValue < -3 || newValue > 3) {
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–∫–æ–≤
            if (change > 0 && availablePoints <= 0) {
                return;
            }

            if (change < 0 && currentValue <= getAncestryBonus(traitName)) {
                return; // –ù–µ –º–æ–∂–µ–º —É–±—Ä–∞—Ç—å –Ω–∏–∂–µ –±–æ–Ω—É—Å–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            }

            characterData.traits[traitName] = newValue;
            availablePoints -= change;
            pointsSpent += change;

            updateTraitsDisplay();
            checkTraitsValidity();
        }

        function getAncestryBonus(traitName) {
            const ancestry = characterData.ancestry;

            switch (ancestry) {
                case 'human':
                    return traitName === 'presence' ? 1 : 0;
                case 'elf':
                    return (traitName === 'finesse' || traitName === 'knowledge') ? 1 : 0;
                case 'dwarf':
                    return (traitName === 'strength' || traitName === 'instinct') ? 1 : 0;
                case 'orc':
                    return traitName === 'strength' ? 2 : 0;
                default:
                    return 0;
            }
        }

        function updateTraitsDisplay() {
            for (let trait in characterData.traits) {
                const valueElement = document.getElementById(`${trait}-value`);
                if (valueElement) {
                    const value = characterData.traits[trait];
                    valueElement.textContent = value >= 0 ? `+${value}` : value;

                    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –±–æ–Ω—É—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                    const bonus = getAncestryBonus(trait);
                    if (bonus > 0) {
                        valueElement.style.color = '#27ae60';
                    } else {
                        valueElement.style.color = '';
                    }
                }
            }

            document.getElementById('available-points').textContent = availablePoints;
        }

        function checkTraitsValidity() {
            const total = Object.values(characterData.traits).reduce((sum, val) => sum + val, 0);
            const errorElement = document.getElementById('traits-error');
            const nextBtn = document.getElementById('next-btn');

            errorElement.textContent = '';

            if (availablePoints > 0) {
                errorElement.textContent = `–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å ${availablePoints} –æ—á–∫–æ–≤`;
                nextBtn.disabled = true;
            } else if (total !== 3) {
                errorElement.textContent = `–°—É–º–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3 (—Å–µ–π—á–∞—Å ${total}). –£–±–µ—Ä–∏—Ç–µ 1 –æ—á–∫–æ –∏–∑ –ª—é–±–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.`;
                nextBtn.disabled = true;
            } else {
                nextBtn.disabled = false;
            }
        }

        function validateTraits() {
            const total = Object.values(characterData.traits).reduce((sum, val) => sum + val, 0);
            return total === 3 && availablePoints === 0;
        }

        function updatePreview() {
            const preview = document.getElementById('preview-content');

            preview.innerHTML = `
                <h3>üë§ ${characterData.name}</h3>
                <p><strong>–ö–ª–∞—Å—Å:</strong> ${classInfo[characterData.class] ? characterData.class.charAt(0).toUpperCase() + characterData.class.slice(1) : '–ù–µ –≤—ã–±—Ä–∞–Ω'}</p>
                <p><strong>–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:</strong> ${characterData.ancestry.charAt(0).toUpperCase() + characterData.ancestry.slice(1)}</p>

                <h4>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h4>
                <div class="trait-grid">
                    ${Object.entries(characterData.traits).map(([trait, value]) => {
                        const traitNames = {
                            strength: 'üí™ –°–∏–ª–∞',
                            agility: 'ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å', 
                            finesse: 'üéØ –¢–æ—á–Ω–æ—Å—Ç—å',
                            instinct: 'üëÅÔ∏è –ò–Ω—Ç—É–∏—Ü–∏—è',
                            presence: 'üëë –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ',
                            knowledge: 'üìö –ó–Ω–∞–Ω–∏—è'
                        };
                        return `
                            <div class="trait-item">
                                <span>${traitNames[trait]}</span>
                                <span class="trait-value">${value >= 0 ? '+' + value : value}</span>
                            </div>
                        `;
                    }).join('')}
                </div>

                <p><small>–°—É–º–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${Object.values(characterData.traits).reduce((sum, val) => sum + val, 0)}</small></p>
            `;
        }

        function createCharacter() {
            if (!validateTraits()) {
                alert('–û—à–∏–±–∫–∞ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
            const characterPayload = {
                action: 'character_created',
                character: {
                    name: characterData.name,
                    class: characterData.class,
                    ancestry: characterData.ancestry,
                    ...characterData.traits
                }
            };

            tg.sendData(JSON.stringify(characterPayload));

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.setItem('daggerheart_character', JSON.stringify(characterData));

            alert(`–ü–µ—Ä—Å–æ–Ω–∞–∂ ${characterData.name} —Å–æ–∑–¥–∞–Ω! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.`);
        }

        function loadCharacter() {
            const saved = localStorage.getItem('daggerheart_character');
            if (saved) {
                characterData = JSON.parse(saved);

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
                document.getElementById('char-name').value = characterData.name;
                document.getElementById('char-class').value = characterData.class;
                document.getElementById('char-ancestry').value = characterData.ancestry;

                showTraitsStep();
                updateTraitsDisplay();

                alert('–ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω!');
            } else {
                alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
        }

        function rollDice() {
            const trait = document.getElementById('trait-select').value;
            const difficulty = parseInt(document.getElementById('difficulty-input').value) || 12;
            const advantage = document.getElementById('advantage-check').checked;
            const disadvantage = document.getElementById('disadvantage-check').checked;

            // –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–∞ Hope/Fear (2d12)
            const hopeDie = Math.floor(Math.random() * 12) + 1;
            const fearDie = Math.floor(Math.random() * 12) + 1;

            let bonus = 0;
            if (advantage && !disadvantage) {
                bonus = Math.floor(Math.random() * 6) + 1;
            } else if (disadvantage && !advantage) {
                bonus = -(Math.floor(Math.random() * 6) + 1);
            }

            const total = hopeDie + fearDie + bonus;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            let resultType = '';
            let resultEmoji = '';

            if (hopeDie === fearDie) {
                resultType = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö!';
                resultEmoji = 'üéØ';
            } else if (hopeDie > fearDie) {
                resultType = '–£—Å–ø–µ—Ö —Å Hope!';
                resultEmoji = '‚ú®';
            } else {
                resultType = '–£—Å–ø–µ—Ö —Å Fear!';
                resultEmoji = '‚ö°';
            }

            const success = total >= difficulty;

            const resultElement = document.getElementById('dice-result');
            resultElement.innerHTML = `
                ${resultEmoji} <strong>${success ? resultType : '–ù–µ—É–¥–∞—á–∞'}</strong><br>
                üé≤ Hope: ${hopeDie} | Fear: ${fearDie}<br>
                ${bonus !== 0 ? `üéØ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${bonus >= 0 ? '+' + bonus : bonus}<br>` : ''}
                üìä –ò—Ç–æ–≥–æ: ${total} (–Ω—É–∂–Ω–æ ${difficulty})
            `;
            resultElement.style.display = 'block';

            setTimeout(() => {
                resultElement.style.display = 'none';
            }, 5000);
        }

        function sendAction() {
            const action = document.getElementById('action-input').value;
            if (!action.trim()) {
                alert('–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –±–æ—Ç—É
            tg.sendData(JSON.stringify({
                action: 'game_action',
                text: action
            }));

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            document.getElementById('action-input').value = '';

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            const gameLog = document.getElementById('game-log');
            gameLog.innerHTML += `<p><strong>–í—ã:</strong> ${action}</p>`;
            gameLog.scrollTop = gameLog.scrollHeight;
        }

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–±–æ—Ä –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –ø–æ–º–µ—Ö–∏
        document.getElementById('advantage-check').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('disadvantage-check').checked = false;
            }
        });

        document.getElementById('disadvantage-check').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('advantage-check').checked = false;
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
        tg.onEvent('mainButtonClicked', function() {
            tg.close();
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
            showTab('character');

            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            const saved = localStorage.getItem('daggerheart_character');
            if (saved) {
                const menu = document.getElementById('menu');
                menu.innerHTML += '<p class="success">–ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!</p>';
            }
        });
    </script>
</body>
</html>
"""


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App"""
    return render_template_string(WEBAPP_HTML)


@app.route('/api/character', methods=['POST'])
def create_character():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    data = request.json
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    return jsonify({"status": "success", "character": data})


@app.route('/api/action', methods=['POST'])
def game_action():
    """API –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    data = request.json
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek
    return jsonify({"status": "success", "gm_response": "–ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –ì–ú"})


def run_webapp():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app.run(host='0.0.0.0', port=PORT, debug=False)


if __name__ == "__main__":
    run_webapp()