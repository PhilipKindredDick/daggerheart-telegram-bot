import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import asyncio
import json
import os
from config import BOT_TOKEN, WEBAPP_URL

# –ò–º–ø–æ—Ä—Ç—ã –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
from game.game_session import session_manager, GameSession, SceneType
from game.character import Character, create_starting_character
from deepseek.gm_api import process_gm_action, start_new_scene

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class DaggerheartBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.user_sessions = {}  # user_id -> session_id
        self.user_characters = {}  # user_id -> Character

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("game", self.start_game))
        self.application.add_handler(CommandHandler("session", self.session_info))
        self.application.add_handler(CommandHandler("roll", self.roll_dice))
        self.application.add_handler(CommandHandler("character", self.character_info))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üó°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daggerheart Bot, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–≥—Ä–∞—Ç—å –≤ Daggerheart —Å –ò–ò –ì–µ–π–º–º–∞—Å—Ç–µ—Ä–æ–º –Ω–∞ –±–∞–∑–µ DeepSeek.

üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/game - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
/character - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
/session - –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
/roll - –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º? üé≤
        """

        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
            [InlineKeyboardButton("üéØ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üìö –ü—Ä–∞–≤–∏–ª–∞", url="https://ru.daggerheart.su/rule")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å –ø–æ Daggerheart Bot

üéÆ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/game - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π
/character - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
/session - –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
/roll [—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞] - –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π

üé≤ **–ë—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π:**
/roll strength - –ë—Ä–æ—Å–æ–∫ —Å–∏–ª—ã
/roll agility - –ë—Ä–æ—Å–æ–∫ –ª–æ–≤–∫–æ—Å—Ç–∏
/roll finesse - –ë—Ä–æ—Å–æ–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
/roll instinct - –ë—Ä–æ—Å–æ–∫ –∏–Ω—Ç—É–∏—Ü–∏–∏
/roll presence - –ë—Ä–æ—Å–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
/roll knowledge - –ë—Ä–æ—Å–æ–∫ –∑–Ω–∞–Ω–∏–π

üé≠ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ Mini App
2. –ü–∏—à–∏ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—ã—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
3. –ò–ò –ì–µ–π–º–º–∞—Å—Ç–µ—Ä –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è
4. –ò—Å–ø–æ–ª—å–∑—É–π /roll –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
5. –°–ª–µ–¥–∏ –∑–∞ Hope –∏ Fear

üìö **–ü—Ä–∞–≤–∏–ª–∞:** https://ru.daggerheart.su/rule
üêõ **–ü—Ä–æ–±–ª–µ–º—ã?** –ù–∞–ø–∏—à–∏ @support –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π /start
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "start_game":
            await self.start_game(update, context)

    async def start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        user_id = str(update.effective_user.id)
        user_name = update.effective_user.first_name

        logger.info(f"üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –¥–ª—è {user_name} (ID: {user_id})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂
        if user_id not in self.user_characters:
            game_text = """
üéÆ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**

–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ Mini App.

–í –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ç—ã —Å–º–æ–∂–µ—à—å:
‚ú® –í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
‚öîÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
üÉè –í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞!
            """

            keyboard = [
                [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", web_app=WebAppInfo(url=WEBAPP_URL))],
                [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è", url="https://ru.daggerheart.su/rule")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if update.callback_query:
                await update.callback_query.edit_message_text(game_text, reply_markup=reply_markup,
                                                              parse_mode='Markdown')
            else:
                await update.message.reply_text(game_text, reply_markup=reply_markup, parse_mode='Markdown')
            return

        # –ï—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        character = self.user_characters[user_id]
        session_id = self.user_sessions.get(user_id)

        if not session_id:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_id = session_manager.create_session(user_id, f"–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ {character.name}")
            session = session_manager.get_session(session_id)
            session.add_player(user_id, character)
            session.start_session()
            self.user_sessions[user_id] = session_id

            logger.info(f"‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è {user_name}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
            try:
                scene_description = await start_new_scene(session_id, "exploration", "–Ω–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")

                game_text = f"""
üé≠ **–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!**

**–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂:** {character.name}
**–ö–ª–∞—Å—Å:** {character.character_class.name_ru if character.character_class else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
**–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:** {character.ancestry.name_ru if character.ancestry else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

---

{scene_description}

---

üí´ **Hope:** {character.progress.hope}/{character.progress.max_hope}
‚ù§Ô∏è **–•–∏—Ç—ã:** {character.current_hp}/{character.hit_points}

*–û–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å! –ò–ò –ì–µ–π–º–º–∞—Å—Ç–µ—Ä —Å—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.*
                """

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã: {e}")
                game_text = f"""
üé≠ **–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!**

**–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂:** {character.name}

–¢–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... (–ì–µ–π–º–º–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤–∏—Ç—Å—è)
–û–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å!
                """

        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            session = session_manager.get_session(session_id)
            if session:
                status = session.get_session_status()
                recent_events = session.get_recent_events(3)

                events_text = "\n".join([f"‚Ä¢ {event['description']}" for event in
                                         recent_events]) if recent_events else "–ü–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ –±—ã–ª–æ"

                game_text = f"""
üé≠ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã**

**–ü–µ—Ä—Å–æ–Ω–∞–∂:** {character.name}
**–°–µ—Å—Å–∏—è:** {status['name']}
**–°—Ü–µ–Ω–∞:** {status['current_scene']['description'] if status['current_scene'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üìú **–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**
{events_text}

üí´ **Hope:** {status['global_hope']} | ‚ö° **Fear:** {status['global_fear']}
‚ù§Ô∏è **–•–∏—Ç—ã:** {character.current_hp}/{character.hit_points}

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*
                """
            else:
                game_text = "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π /start"

        keyboard = [
            [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", callback_data="quick_roll")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏", callback_data="session_status")],
            [InlineKeyboardButton("üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", web_app=WebAppInfo(url=WEBAPP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(game_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(game_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def session_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        user_id = str(update.effective_user.id)
        session_id = self.user_sessions.get(user_id)

        if not session_id:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π /game –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
            return

        session = session_manager.get_session(session_id)
        if not session:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å /game")
            return

        status = session.get_session_status()
        recent_events = session.get_recent_events(5)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        session_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏**

üé≠ **–°–µ—Å—Å–∏—è:** {status['name']}
üïê **–í—Ä–µ–º—è –∏–≥—Ä—ã:** {status['uptime']}
üë• **–ò–≥—Ä–æ–∫–æ–≤:** {status['players_count']}/{status['max_players']}

üí´ **Hope –ø—É–ª–ª:** {status['global_hope']}
‚ö° **Fear –ø—É–ª–ª:** {status['global_fear']}

üé¨ **–¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞:**
{status['current_scene']['description'] if status['current_scene'] else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω—ã'}

üë• **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:**
"""

        for char_info in status['characters']:
            current_marker = "üëë " if char_info['is_current_turn'] else "‚Ä¢ "
            session_text += f"{current_marker}{char_info['name']} ({char_info['class']}) - {char_info['hp']} ‚ù§Ô∏è\n"

        if recent_events:
            session_text += f"\nüìú **–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
            for event in recent_events:
                session_text += f"‚Ä¢ {event['description']}\n"

        await update.message.reply_text(session_text, parse_mode='Markdown')

    async def roll_dice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π"""
        user_id = str(update.effective_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ —Å–µ—Å—Å–∏—è
        if user_id not in self.user_characters:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ò—Å–ø–æ–ª—å–∑—É–π /game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return

        session_id = self.user_sessions.get(user_id)
        if not session_id:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π /game –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
            return

        session = session_manager.get_session(session_id)
        if not session:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            keyboard = [
                [InlineKeyboardButton("üí™ –°–∏–ª–∞", callback_data="roll_strength"),
                 InlineKeyboardButton("ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å", callback_data="roll_agility")],
                [InlineKeyboardButton("üéØ –¢–æ—á–Ω–æ—Å—Ç—å", callback_data="roll_finesse"),
                 InlineKeyboardButton("üëÅÔ∏è –ò–Ω—Ç—É–∏—Ü–∏—è", callback_data="roll_instinct")],
                [InlineKeyboardButton("üëë –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ", callback_data="roll_presence"),
                 InlineKeyboardButton("üìö –ó–Ω–∞–Ω–∏—è", callback_data="roll_knowledge")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "üé≤ **–í—ã–±–µ—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –±—Ä–æ—Å–∫–∞:**\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π: `/roll [—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞]`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/roll strength`",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        trait_name = args[0].lower()
        difficulty = int(args[1]) if len(args) > 1 else 12

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        valid_traits = ['strength', 'agility', 'finesse', 'instinct', 'presence', 'knowledge']
        trait_names_ru = {
            'strength': '—Å–∏–ª–∞', 'agility': '–ª–æ–≤–∫–æ—Å—Ç—å', 'finesse': '—Ç–æ—á–Ω–æ—Å—Ç—å',
            'instinct': '–∏–Ω—Ç—É–∏—Ü–∏—è', 'presence': '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ', 'knowledge': '–∑–Ω–∞–Ω–∏—è'
        }

        if trait_name not in valid_traits:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {trait_name}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_traits)}"
            )
            return

        # –°–æ–≤–µ—Ä—à–∞–µ–º –±—Ä–æ—Å–æ–∫
        result = session.make_character_roll(user_id, trait_name, difficulty)

        if 'error' in result:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        trait_ru = trait_names_ru.get(trait_name, trait_name)
        roll_text = f"üé≤ **–ë—Ä–æ—Å–æ–∫ {trait_ru}**\n\n{result['formatted_result']}"

        await update.message.reply_text(roll_text, parse_mode='Markdown')

    async def character_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        user_id = str(update.effective_user.id)

        if user_id not in self.user_characters:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ò—Å–ø–æ–ª—å–∑—É–π /game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return

        character = self.user_characters[user_id]
        char_sheet = character.get_character_sheet()

        char_text = f"""
üë§ **{char_sheet['basic_info']['name']}**

üèõÔ∏è **–ö–ª–∞—Å—Å:** {char_sheet['basic_info']['class']}
üß¨ **–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:** {char_sheet['basic_info']['ancestry']}
üìà **–£—Ä–æ–≤–µ–Ω—å:** {char_sheet['basic_info']['level']}

üí™ **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –°–∏–ª–∞: {char_sheet['traits']['strength']:+d}
‚Ä¢ –õ–æ–≤–∫–æ—Å—Ç—å: {char_sheet['traits']['agility']:+d}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {char_sheet['traits']['finesse']:+d}
‚Ä¢ –ò–Ω—Ç—É–∏—Ü–∏—è: {char_sheet['traits']['instinct']:+d}
‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {char_sheet['traits']['presence']:+d}
‚Ä¢ –ó–Ω–∞–Ω–∏—è: {char_sheet['traits']['knowledge']:+d}

‚öîÔ∏è **–ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –•–∏—Ç—ã: {char_sheet['combat_stats']['hit_points']}
‚Ä¢ –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {char_sheet['combat_stats']['evasion']}
‚Ä¢ –ü–æ—Ä–æ–≥ —É—Ä–æ–Ω–∞: {char_sheet['combat_stats']['damage_threshold']}

üí´ **–ü—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ Hope: {char_sheet['progress']['hope']}
‚Ä¢ –û–ø—ã—Ç: {char_sheet['progress']['experience']}

üéí **–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:**
{chr(10).join([f"‚Ä¢ {item}" for item in char_sheet['equipment']]) if char_sheet['equipment'] else "–ü—É—Å—Ç–æ"}

üÉè **–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**
{chr(10).join([f"‚Ä¢ {card}" for card in char_sheet['domain_cards']]) if char_sheet['domain_cards'] else "–ù–µ—Ç"}
        """

        keyboard = [
            [InlineKeyboardButton("üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", callback_data="quick_roll")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(char_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ì–ú"""
        user_id = str(update.effective_user.id)
        user_message = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ —Å–µ—Å—Å–∏—è
        if user_id not in self.user_characters:
            await update.message.reply_text(
                "üé≠ –ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /game –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return

        session_id = self.user_sessions.get(user_id)
        if not session_id:
            await update.message.reply_text(
                "üé≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /game –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await update.message.chat.send_action("typing")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ò–ò –ì–µ–π–º–º–∞—Å—Ç–µ—Ä—É
            logger.info(f"üé≠ –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ {user_id}: {user_message}")

            gm_result = await process_gm_action(session_id, user_id, user_message)

            if gm_result.get("success"):
                gm_response = gm_result["gm_response"]

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                context_info = gm_result.get("context", {})
                if context_info:
                    hope = context_info.get("hope", 0)
                    fear = context_info.get("fear", 0)
                    gm_response += f"\n\nüí´ Hope: {hope} | ‚ö° Fear: {fear}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                effects = gm_result.get("effects", [])
                keyboard = []

                for effect in effects:
                    if effect.get("type") == "request_roll":
                        trait = effect.get("trait", "strength")
                        difficulty = effect.get("difficulty", 12)
                        keyboard.append([InlineKeyboardButton(
                            f"üé≤ –ë—Ä–æ—Å–∏—Ç—å {trait} ({difficulty})",
                            callback_data=f"roll_{trait}_{difficulty}"
                        )])

                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
                keyboard.extend([
                    [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–æ–∫", callback_data="quick_roll"),
                     InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="session_status")]
                ])

                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

                await update.message.reply_text(gm_response, reply_markup=reply_markup)

            else:
                # –û—à–∏–±–∫–∞ –ò–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç
                fallback = gm_result.get("fallback_response", "–ì–ú –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...")
                await update.message.reply_text(f"üé≠ {fallback}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "üé≠ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ì–ú –∑–∞–¥—É–º–∞–ª—Å—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help"
            )

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
        user_id = str(update.effective_user.id)

        try:
            data = json.loads(update.message.web_app_data.data)
            action = data.get("action")

            if action == "character_created":
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                char_data = data.get("character", {})

                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                traits = {
                    "agility": char_data.get("agility", 0),
                    "strength": char_data.get("strength", 0),
                    "finesse": char_data.get("finesse", 0),
                    "instinct": char_data.get("instinct", 0),
                    "presence": char_data.get("presence", 0),
                    "knowledge": char_data.get("knowledge", 0)
                }

                character = create_starting_character(
                    char_data.get("name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"),
                    user_id,
                    char_data.get("class", "warrior"),
                    char_data.get("ancestry", "human"),
                    traits
                )

                self.user_characters[user_id] = character

                await update.message.reply_text(
                    f"‚ú® –ü–µ—Ä—Å–æ–Ω–∞–∂ **{character.name}** —Å–æ–∑–¥–∞–Ω!\n"
                    f"–ö–ª–∞—Å—Å: {character.character_class.name_ru}\n"
                    f"–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {character.ancestry.name_ru}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π /game –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!",
                    parse_mode='Markdown'
                )

            elif action == "game_action":
                # –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ Mini App
                action_text = data.get("text", "")
                if action_text:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    update.message.text = action_text
                    await self.handle_message(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

        if update.message:
            await update.message.reply_text(
                "ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Daggerheart Bot...")
        self.application.add_error_handler(self.error_handler)
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    bot = DaggerheartBot()
    bot.run()
    import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import asyncio
import os
from config import BOT_TOKEN, WEBAPP_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class DaggerheartBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("game", self.start_game))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üó°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daggerheart Bot, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–≥—Ä–∞—Ç—å –≤ Daggerheart —Å –ì–ú –Ω–∞ –±–∞–∑–µ –ò–ò.

–ö–æ–º–∞–Ω–¥—ã:
/game - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
/help - –ü–æ–º–æ—â—å

–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º? üé≤
        """

        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
            [InlineKeyboardButton("üéØ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üìö –ü—Ä–∞–≤–∏–ª–∞", url="https://ru.daggerheart.su/rule")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Daggerheart

üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/game - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üé≤ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:
1. –ù–∞–∂–º–∏ /game –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
2. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
3. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π —Å –ì–ú —á–µ—Ä–µ–∑ —á–∞—Ç

üìö –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: https://ru.daggerheart.su/rule
        """
        await update.message.reply_text(help_text)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "start_game":
            # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /game
            await self.start_game(update, context)

    async def start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        user_id = update.effective_user.id
        logger.info(f"üéÆ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π WEBAPP_URL: {WEBAPP_URL}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if "your-replit" in WEBAPP_URL or not WEBAPP_URL.startswith("https://"):
            error_msg = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π WEBAPP_URL: {WEBAPP_URL}"
            logger.error(error_msg)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WEBAPP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
            )
            return

        try:
            keyboard = [
                [InlineKeyboardButton(
                    "üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ Mini App —Å–æ–∑–¥–∞–Ω–∞ —Å URL: {WEBAPP_URL}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Mini App: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!")
            return

        game_text = """
üéÆ –ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è Daggerheart

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
–í –Ω–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å:
- –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ì–ú
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏

–£–¥–∞—á–∏ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö! üó°Ô∏è
        """

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.callback_query:
            await update.callback_query.edit_message_text(game_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(game_text, reply_markup=reply_markup)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ
        user_message = update.message.text

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        response = f"–ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n(–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ì–ú!)"

        await update.message.reply_text(response)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Daggerheart Bot...")
        self.application.add_error_handler(self.error_handler)
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    bot = DaggerheartBot()
    bot.run()